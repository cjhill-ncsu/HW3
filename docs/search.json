[
  {
    "objectID": "HW3.html",
    "href": "HW3.html",
    "title": "HW3",
    "section": "",
    "text": "load(\"hw2_list.rda\")\nstr(bp_list)\n\nList of 2\n $ treatment:'data.frame':  20 obs. of  5 variables:\n  ..$ patient: chr [1:20] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:20] 120 151 125 126 115 132 132 129 134 139 ...\n  ..$ post_bp: num [1:20] 127 145 135 122 115 122 123 126 126 129 ...\n  ..$ diff_bp: num [1:20] -7 6 -10 4 0 10 9 3 8 10 ...\n  ..$ normal : logi [1:20] FALSE FALSE FALSE FALSE TRUE FALSE ...\n $ placebo  :'data.frame':  10 obs. of  5 variables:\n  ..$ patient: chr [1:10] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:10] 138 135 147 117 152 134 114 121 131 130\n  ..$ post_bp: num [1:10] 105 136 123 130 134 143 135 139 120 124\n  ..$ diff_bp: num [1:10] 33 -1 24 -13 18 -9 -21 -18 11 6\n  ..$ normal : logi [1:10] TRUE FALSE FALSE FALSE FALSE FALSE ...\n\n\n\nTask 1: Control Flow Practice\n\n(1) Create the status Column\n\nbp_list &lt;- lapply(bp_list, function(df) {\n  df$status &lt;- character(nrow(df))\n  return(df)\n})\n\nstr(bp_list)\n\nList of 2\n $ treatment:'data.frame':  20 obs. of  6 variables:\n  ..$ patient: chr [1:20] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:20] 120 151 125 126 115 132 132 129 134 139 ...\n  ..$ post_bp: num [1:20] 127 145 135 122 115 122 123 126 126 129 ...\n  ..$ diff_bp: num [1:20] -7 6 -10 4 0 10 9 3 8 10 ...\n  ..$ normal : logi [1:20] FALSE FALSE FALSE FALSE TRUE FALSE ...\n  ..$ status : chr [1:20] \"\" \"\" \"\" \"\" ...\n $ placebo  :'data.frame':  10 obs. of  6 variables:\n  ..$ patient: chr [1:10] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:10] 138 135 147 117 152 134 114 121 131 130\n  ..$ post_bp: num [1:10] 105 136 123 130 134 143 135 139 120 124\n  ..$ diff_bp: num [1:10] 33 -1 24 -13 18 -9 -21 -18 11 6\n  ..$ normal : logi [1:10] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ status : chr [1:10] \"\" \"\" \"\" \"\" ...\n\n\n\n\n(2) Update status for the treatment Data Frame\n\nfor (i in seq_len(nrow(bp_list$treatment))) {\n  if (bp_list$treatment$post_bp[i] &lt;= 120) {\n    bp_list$treatment$status[i] &lt;- \"optimal\"\n  } else if (bp_list$treatment$post_bp[i] &lt;= 130) {\n    bp_list$treatment$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$treatment$status[i] &lt;- \"high\"\n  }\n}\n\nbp_list$treatment |&gt; head() |&gt; knitr::kable()\n\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nnormal\nstatus\n\n\n\n\nSubject_1\nSubject_1\n120\n127\n-7\nFALSE\nborderline\n\n\nSubject_2\nSubject_2\n151\n145\n6\nFALSE\nhigh\n\n\nSubject_3\nSubject_3\n125\n135\n-10\nFALSE\nhigh\n\n\nSubject_4\nSubject_4\n126\n122\n4\nFALSE\nborderline\n\n\nSubject_5\nSubject_5\n115\n115\n0\nTRUE\noptimal\n\n\nSubject_6\nSubject_6\n132\n122\n10\nFALSE\nborderline\n\n\n\n\n\n\n\n(3) Update status for the placebo Data Frame\n\nfor (i in seq_len(nrow(bp_list$placebo))) {\n  if (bp_list$placebo$post_bp[i] &lt;= 120) {\n    bp_list$placebo$status[i] &lt;- \"optimal\"\n  } else if (bp_list$placebo$post_bp[i] &lt;= 130) {\n    bp_list$placebo$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$placebo$status[i] &lt;- \"high\"\n  }\n}\n\nbp_list$placebo |&gt; head() |&gt; knitr::kable()\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nnormal\nstatus\n\n\n\n\nSubject_1\n138\n105\n33\nTRUE\noptimal\n\n\nSubject_2\n135\n136\n-1\nFALSE\nhigh\n\n\nSubject_3\n147\n123\n24\nFALSE\nborderline\n\n\nSubject_4\n117\n130\n-13\nFALSE\nborderline\n\n\nSubject_5\n152\n134\n18\nFALSE\nhigh\n\n\nSubject_6\n134\n143\n-9\nFALSE\nhigh\n\n\n\n\n\n\n\n\nTask 2: Function Writing\n\n(1) Define the Function\n\nTake a list with two data frames.\nTake a string input for a summary function, defaulting to “mean”.\nUse get() to dynamically retrieve the function based on the string.\nCalculate the statistic for pre, post, and diff columns of both data frames.\nReturns a named vector with meaningful names based on the statistic.\n\n\ncalculate_stats &lt;- function(df_list, stat = \"mean\") {\n  # Takes a string input for a summary function, defaulting to \"mean\".\n  my_fun &lt;- get(stat)\n  \n  # Calculates the statistic for pre, post, and diff columns of both data frames.\n  treatment_pre &lt;- my_fun(df_list$treatment$pre_bp, na.rm = TRUE)\n  treatment_post &lt;- my_fun(df_list$treatment$post_bp, na.rm = TRUE)\n  treatment_diff &lt;- my_fun(df_list$treatment$diff_bp, na.rm = TRUE)\n  \n  placebo_pre &lt;- my_fun(df_list$placebo$pre_bp, na.rm = TRUE)\n  placebo_post &lt;- my_fun(df_list$placebo$post_bp, na.rm = TRUE)\n  placebo_diff &lt;- my_fun(df_list$placebo$diff_bp, na.rm = TRUE)\n  \n  # Returns a named vector with meaningful names based on the statistic.\n  stats_vector &lt;- c(\n    treatment_pre, treatment_post, treatment_diff,\n    placebo_pre, placebo_post, placebo_diff\n  )\n  \n  names(stats_vector) &lt;- c(\n    paste0(stat, \"_treatment_pre\"),\n    paste0(stat, \"_treatment_post\"),\n    paste0(stat, \"_treatment_diff\"),\n    paste0(stat, \"_placebo_pre\"),\n    paste0(stat, \"_placebo_post\"),\n    paste0(stat, \"_placebo_diff\")\n  )\n  \n  return(stats_vector)  # Returns the named vector.\n}\n\n\n\n(2) Apply the Function to the bp_list\nApply the function to list of data frames from previous task. Use it without specifying the statistic, then with specifying your statistic as “var”, “sd”, “min”, and “max”\n\nMean (without specifying statistic)\n\nresult_mean &lt;- calculate_stats(bp_list)\nknitr::kable(result_mean)\n\n\n\n\n\nx\n\n\n\n\nmean_treatment_pre\n131.60\n\n\nmean_treatment_post\n125.95\n\n\nmean_treatment_diff\n5.65\n\n\nmean_placebo_pre\n131.90\n\n\nmean_placebo_post\n128.90\n\n\nmean_placebo_diff\n3.00\n\n\n\n\n\n\n\nVariance\n\nresult_var &lt;- calculate_stats(bp_list, stat = \"var\")\nknitr::kable(result_var)\n\n\n\n\n\nx\n\n\n\n\nvar_treatment_pre\n75.72632\n\n\nvar_treatment_post\n78.99737\n\n\nvar_treatment_diff\n117.81842\n\n\nvar_placebo_pre\n149.87778\n\n\nvar_placebo_post\n124.98889\n\n\nvar_placebo_diff\n341.33333\n\n\n\n\n\n\n\nStandard Deviation\n\nresult_sd &lt;- calculate_stats(bp_list, stat = \"sd\")\nknitr::kable(result_sd)\n\n\n\n\n\nx\n\n\n\n\nsd_treatment_pre\n8.702087\n\n\nsd_treatment_post\n8.888046\n\n\nsd_treatment_diff\n10.854419\n\n\nsd_placebo_pre\n12.242458\n\n\nsd_placebo_post\n11.179843\n\n\nsd_placebo_diff\n18.475209\n\n\n\n\n\n\n\nMin\n\nresult_min &lt;- calculate_stats(bp_list, stat = \"min\")\nknitr::kable(result_min)\n\n\n\n\n\nx\n\n\n\n\nmin_treatment_pre\n115\n\n\nmin_treatment_post\n114\n\n\nmin_treatment_diff\n-24\n\n\nmin_placebo_pre\n114\n\n\nmin_placebo_post\n105\n\n\nmin_placebo_diff\n-21\n\n\n\n\n\n\n\nMax\n\nresult_max &lt;- calculate_stats(bp_list, stat = \"max\")\nknitr::kable(result_max)\n\n\n\n\n\nx\n\n\n\n\nmax_treatment_pre\n151\n\n\nmax_treatment_post\n146\n\n\nmax_treatment_diff\n21\n\n\nmax_placebo_pre\n152\n\n\nmax_placebo_post\n143\n\n\nmax_placebo_diff\n33"
  }
]